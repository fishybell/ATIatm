#!/bin/sh

# procedure start the default programs
def_progs() {

   # clean up old firmware files
   rm -f /home/root/atifirmware*

   # check that our version numbers are up-to-date
   /usr/bin/be_major_version
   /usr/bin/be_minor_version

   # start the "early" programs
# user_conn is now started by inittab: 03/26/12 randy
#   user_conn &
   case $board in
      TTMT|MIT|MAT)
         mitd=$(has_dock)
         case $mitd in
             1|3)
                 left=0;;
             *)
                 left=1;;
         esac
         bit_button -l $left -r MOVER &
         ;;
      SIT|LSAT|HSAT|SAT)
         bit_button -r LIFTER &
         ;;
      EIM|SES)
         bit_button -r SOUND &
         ;;
      *)
         bit_button &
         ;;
   esac
         
   # radio stuff here to ip is always correct later on radio devices
   if [ "$comm" == "radio" ] ; then
      # load radio defaults onto radio
      if [ -f /usr/bin/dtxm_edit.arm ] ; then
         # this will be very quick if we don't need to change settings, and very slow if we do, but it won't show as booted until afterwards
         /usr/bin/dtxm_edit.arm -v f
      fi
      case $board in
         HHC|BASE)
            # boot RFmaster
            /usr/bin/RFmaster.arm -t /dev/ttyS1 -v 0 &
            ;;
         *)
            # boot slaveboss, wait for it to boot, then RFslave
            /usr/bin/slaveboss.arm -v 0 &
            sleep 1
            /usr/bin/RFslave.new.arm -r /dev/ttyS1 -v 0 &
            ;;
      esac
      cport=14000
      ip="127.0.0.1"
   fi


   # find auto ip, if necessary
   if [ "$ip" == "auto" ] ; then
      # start event_conn early if we're auto-ip
      case $board in
         TTMT|MIT|MAT)
            # TODO -- TTMT needs to start multiple event_conn servers (form a triangle of connections)
            # always start stand-alone (will also act as server)
            event_conn -S -v -k -r MOVER &
            ;;
         SIT|LSAT|HSAT|SAT)
            # start stand-alone
            event_conn -S -v -k -r LIFTER &
            ;;
         EIM|SES)
            # start stand-alone
            event_conn -S -v -k -r SOUND &
            ;;
      esac

      # leave it as auto now that the event_conn and fasit_conn can auto-find on their own
      # ip=`bcast_client`

      # restart event_conn to connect them together
      killall -q -9 event_conn
   fi

   # connect event_conns together
   case $board in
      TTMT|MIT|MAT)
         # TODO -- TTMT needs to start multiple event_conn servers (form a triangle of connections)
         # always start stand-alone (will also act as server)
         event_conn -S -v -k -r MOVER &
         ;;
      SIT|LSAT|HSAT|SAT)
         if [ "$comm" == "local" ] ; then
            # TODO -- when attached to a TTMT needs to start multiple event_conn clients (form a triangle of connections)
            event_conn -i $ip -C -v -k -r LIFTER &
         else
            # start stand-alone
            event_conn -S -v -k -r LIFTER &
         fi
         ;;
      EIM|SES)
         if [ "$comm" == "local" ] ; then
            # TODO -- when attached to a TTMT needs to start multiple event_conn clients (form a triangle of connections)
            event_conn -i $ip -C -v -k -r SOUND &
         else
            # start stand-alone
            event_conn -S -v -k -r SOUND &
         fi
         ;;
   esac

   # start auto ip server
   case $board in
      TTMT|MAT|MIT)
         if [ "$comm" != "network" ] ; then
            bcast_server &
            # start ping if we're on a wimax network
            if [ "$comm" == "wimax" ] ; then
               ping -q $ip &
            fi
         fi
         ;;
   esac

   # start the non-standard broadcast server on every product at the very end to help with runtime autodetection of connected devices
   bcast_server -p 4227 &

   export ip=$ip
   export cport=$cport
}

# grab eeprom values
lport=`is_lport`
cport=`is_cport`
ip=`is_ip`
comm=`is_comm`
board=`is_board`

# set keepalive timeouts
sysctl -w \
 net.ipv4.tcp_keepalive_time=2 \
 net.ipv4.tcp_keepalive_intvl=1 \
 net.ipv4.tcp_keepalive_probes=3 \
 net.ipv4.tcp_retries1=1 \
 net.ipv4.tcp_retries2=1 \
 net.ipv4.tcp_max_syn_backlog=16

# restart wlan0 if necessary
wlan=wlan0
wlan=$(ifconfig $wlan | grep wlan | cut -d' ' -f1)
if [ -n "$wlan" ] ; then
   # found wifi device, does it have a network address?
   if [ -z "$(ifconfig $wlan | grep inet)" ] ; then
      # no network address, refresh
      ifdown $wlan
      sleep 1
      ifup $wlan
   fi
fi

# find default ports
if [ -z "$lport" -o "$lport" == "none" ] ; then
   lport=4000
fi
if [ -z "$cport" -o "$cport" == "none" ] ; then
   cport=4000
fi

# find default ip address (to connect to)
if [ -z "$ip" -o "$ip" == "none" ] ; then
   case $board in
      TTMT|MAT|MIT)
         case $comm in
            local|network|wimax|wifi)
               ip="192.168.1.1"
               ;;
            radio)
               ip="127.0.0.1"
               ;;
            *)
               ip="192.168.1.1"
               ;;
         esac
         ;;
      EIM|HHC|BASE|SES|SIT|LSAT|HSAT|SAT)
         ip="auto"
         ;;
      RELAY)
         ip="127.0.0.1"
         ;;
      *)
         ip="auto"
         ;;
   esac
fi

# return the results
echo "$ip $lport $cport $comm $board"
